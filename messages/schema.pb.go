// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

package messages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GofiMessage struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GofiMessage) Reset()         { *m = GofiMessage{} }
func (m *GofiMessage) String() string { return proto.CompactTextString(m) }
func (*GofiMessage) ProtoMessage()    {}
func (*GofiMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

func (m *GofiMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GofiMessage.Unmarshal(m, b)
}
func (m *GofiMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GofiMessage.Marshal(b, m, deterministic)
}
func (m *GofiMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GofiMessage.Merge(m, src)
}
func (m *GofiMessage) XXX_Size() int {
	return xxx_messageInfo_GofiMessage.Size(m)
}
func (m *GofiMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GofiMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GofiMessage proto.InternalMessageInfo

func (m *GofiMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GofiMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type GofiVoid struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GofiVoid) Reset()         { *m = GofiVoid{} }
func (m *GofiVoid) String() string { return proto.CompactTextString(m) }
func (*GofiVoid) ProtoMessage()    {}
func (*GofiVoid) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}

func (m *GofiVoid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GofiVoid.Unmarshal(m, b)
}
func (m *GofiVoid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GofiVoid.Marshal(b, m, deterministic)
}
func (m *GofiVoid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GofiVoid.Merge(m, src)
}
func (m *GofiVoid) XXX_Size() int {
	return xxx_messageInfo_GofiVoid.Size(m)
}
func (m *GofiVoid) XXX_DiscardUnknown() {
	xxx_messageInfo_GofiVoid.DiscardUnknown(m)
}

var xxx_messageInfo_GofiVoid proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GofiMessage)(nil), "messages.GofiMessage")
	proto.RegisterType((*GofiVoid)(nil), "messages.GofiVoid")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a) }

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xce, 0x48,
	0xcd, 0x4d, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x4f, 0x2d, 0x56, 0x32, 0xe5, 0xe2, 0x76, 0xcf, 0x4f, 0xcb, 0xf4, 0x85, 0xf0, 0x85, 0x04, 0xb8,
	0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x11, 0x2e,
	0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x08, 0x47, 0x89,
	0x8b, 0x8b, 0x03, 0xa4, 0x2d, 0x2c, 0x3f, 0x33, 0xc5, 0xc8, 0x89, 0x8b, 0x05, 0xc4, 0x16, 0xb2,
	0xe2, 0x62, 0x09, 0x4e, 0xcd, 0x4b, 0x11, 0x12, 0xd5, 0x83, 0x99, 0xae, 0x87, 0x64, 0xb4, 0x14,
	0x76, 0x61, 0x25, 0x06, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xbb, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0x0e, 0x84, 0x2f, 0xa7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GofiClient is the client API for Gofi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GofiClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Gofi_SendClient, error)
}

type gofiClient struct {
	cc *grpc.ClientConn
}

func NewGofiClient(cc *grpc.ClientConn) GofiClient {
	return &gofiClient{cc}
}

func (c *gofiClient) Send(ctx context.Context, opts ...grpc.CallOption) (Gofi_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gofi_serviceDesc.Streams[0], "/messages.Gofi/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &gofiSendClient{stream}
	return x, nil
}

type Gofi_SendClient interface {
	Send(*GofiMessage) error
	Recv() (*GofiMessage, error)
	grpc.ClientStream
}

type gofiSendClient struct {
	grpc.ClientStream
}

func (x *gofiSendClient) Send(m *GofiMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gofiSendClient) Recv() (*GofiMessage, error) {
	m := new(GofiMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GofiServer is the server API for Gofi service.
type GofiServer interface {
	Send(Gofi_SendServer) error
}

func RegisterGofiServer(s *grpc.Server, srv GofiServer) {
	s.RegisterService(&_Gofi_serviceDesc, srv)
}

func _Gofi_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GofiServer).Send(&gofiSendServer{stream})
}

type Gofi_SendServer interface {
	Send(*GofiMessage) error
	Recv() (*GofiMessage, error)
	grpc.ServerStream
}

type gofiSendServer struct {
	grpc.ServerStream
}

func (x *gofiSendServer) Send(m *GofiMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gofiSendServer) Recv() (*GofiMessage, error) {
	m := new(GofiMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Gofi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Gofi",
	HandlerType: (*GofiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Gofi_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "schema.proto",
}
